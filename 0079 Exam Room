//855
class ExamRoom {//[1 0 0 0 0 1]  =>    (0,5) the index 
    int size;
    PriorityQueue<int[]> pq;
    int max;
    public ExamRoom(int N) {
        size=0;
        max=N;
        
        pq=new PriorityQueue<>(new Comparator<int[]>(){
            @Override
            public int compare(int[]left,int[]right){
                if ((left[1]-left[0])/2==(right[1]-right[0])/2)
                    return left[1]-right[1];
                return (right[1]-right[0])/2-(left[1]-left[0])/2;    
            }});
    }
    
    public int seat() {
        System.out.print("size:  ");
        System.out.println(size);
        
        if (size>=max)
            return -1;
        if (pq.size()==0){
            pq.offer(new int[]{0,2*max -1});
            size++;
            return 0;
            
        }
        int[] del=pq.poll();
        int mid=del[0]+(del[1]-del[0])/2;
        if (mid!=0){   //after delete 0, if we want to add 0 again, we add(-x,x),mid=0
            pq.offer(new int []{del[0],mid});
        }
        if (mid!=max-1){
            pq.offer(new int []{mid,del[1]});
        }
        size++;
        
        return mid;
        
    }
    
    public void leave(int p) {
        System.out.println(p);
            
        if (size==1){
            pq.clear();
            //size--;
            size=0;
            return;
        }
        int [] p_left=null;
        int [] p_right=null;
        
        for (int[] k:pq){
            if (k[0]==p)
                p_right=k;
            else if (k[1]==p)
                p_left=k;
        }
        if(p==0){
            
            pq.offer(new int[]{-p_right[1],p_right[1]});
            pq.remove(p_right);
            size--;
            return;
        }
        if (p==max-1){
            pq.offer(new int[]{p_left[0],p_left[1]+p_left[1]-p_left[0]});
            pq.remove(p_left);
            size--;
            return;
        }
        
        
        if (p_left!=null)
            pq.remove(p_left);
        if(p_right!=null)
            pq.remove(p_right);
        
        
        //for edge,  to make the mid euqal the last item, we need to change the right end
        //max-1+max-1-p_left[0]
        if (p_right!=null&&p_right[1]>max-1)
            
            pq.offer(new int []{p_left[0],max-1+max-1-p_left[0]});
        else if (p_left!=null&&p_left[0]<0)
            pq.offer(new int []{-p_right[1],p_right[1]});
        else
            pq.offer(new int []{p_left[0],p_right[1]});
        
        size--;
        return;
    }
}

/**
 * Your ExamRoom object will be instantiated and called as such:
 * ExamRoom obj = new ExamRoom(N);
 * int param_1 = obj.seat();
 * obj.leave(p);
 */
