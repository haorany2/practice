//8
//Character.isDigit()
//Character.getNumericValue()
//Math.pow(3,2)  =>   3^2
//boundary: cause, for +, boundary is 2^31-1; for -, boundary is -2^31, neg has one more than pos,
//so we cannot convert the Math.pow(2,31) to int and put  - before it to express negative. 
//we can use neg in pow  or           we can use Math.pow(2,31)+1 (overflow)
//pos+neg=0 (without the first sign digit), for all other number, 2's complement work (1010, 0110) 
//special :  (0000, 1000)
class Solution {
    public int myAtoi(String str) {
        boolean negative=false;
       
        while (!str.equals("") &&str.charAt(0)==' ')
            str=str.substring(1);
        if (str.equals("") || (str.charAt(0)!='+'&& str.charAt(0)!='-' &&!Character.isDigit(str.charAt(0))))
            return 0;
        //if (str.equals("") ||())
        if (str.charAt(0)=='+')
            str=str.substring(1);
        else if (str.charAt(0)=='-'){
            negative=true;
            str=str.substring(1);
            
        }
        if (str.equals(""))
            return 0;
        int count=0;
        while (count<str.length() && Character.isDigit(str.charAt(count))){
            count++;
        }
        int digit_length=count;
        double result=0;
        while(count-1>=0){
            result+=(Math.pow(10,count-1) )*Character.getNumericValue(str.charAt(digit_length-count));
            if (negative==true && result >=Math.pow(2,31)){
                
                return ((int)(Math.pow(-2,31)));
            }
            if (negative==false && result >Math.pow(2,31)-1)
                return (int)(Math.pow(2,31)-1);
            count--;
        }
        if (negative==true)
            return -(int)result;
        return (int)result;
        

    }
}
