/*
 * You are given two non-empty linked lists representing two non-negative integers.
 *  The digits are stored in reverse order and each of their nodes contain a single digit. 
 *  Add the two numbers and return it as a linked list.
 *
 * 
 * You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 * 
 * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
	Output: 7 -> 0 -> 8
	Explanation: 342 + 465 = 807.
 */



package leetcode;

public class leet {
	static class ListNode {
		      int val;
		      ListNode next;
		      ListNode(int x) { val = x; }
		     // ListNode(){}
	}
	
	static ListNode result;
	static boolean carry=false;
	static public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		//boolean carry=false;
		if (l1.next==null && l2.next==null){
			if (carry==false){
				if(l1.val+l2.val<10){
					l1.val=l1.val+l2.val;
					
				}
				else if(l1.val+l2.val>=10){
					l1.val=l1.val+l2.val-10;
					
					l1.next=new ListNode(1);
					
				}
			}
			else{
				if(l1.val+l2.val+1<10){
					
					l1.val=l1.val+l2.val+1;	
					
				}
				else if(l1.val+l2.val+1>=10){
					l1.val=l1.val+l2.val+1-10;
					l1.next=new ListNode(1);		
				}
			}
			return l1;
		}
		else if (l1.next==null &&l2.next!=null){//////////////////////////
        	if(carry==false){
        		if (l1.val+l2.val<10 ){
        			l1.val=l1.val+l2.val;
        			l1.next=l2.next;
        			return l1;
        		}
        		else if(l1.val+l2.val>=10){
        			
        			
					//l1.val=l1.val+l2.val-10;
					l1.next=new ListNode(0);
					return addTwoNumbers(l1,l2);
					
				}
        	}
        	else{
        		
        		if (l1.val+l2.val+1<10 ){
        			carry=false;
        			l1.val=l1.val+l2.val+1;
        			l1.next=l2;
        			return l1;
        		}
        		else if(l1.val+l2.val+1>=10){
        			
					//l1.val=l1.val+l2.val-10+1;
					l1.next=new ListNode(0);
					return addTwoNumbers(l1,l2);
					
				}
        		
        	}
        }
		else if (l1.next!=null &&l2.next==null){
        	if(carry==false){
        		if (l1.val+l2.val<10 ){
        			l1.val=l1.val+l2.val;
        			return l1;
        			
        		}
        		else if(l1.val+l2.val>=10){
        			carry=true;
					//l1.val=l1.val+l2.val-10;
					l2.next=new ListNode(0);
					return addTwoNumbers(l1,l2);
					
				}
        	}
        	else{
        		if (l1.val+l2.val+1<10 ){
        			carry=false;
        			l1.val=l1.val+l2.val+1;
        			return l1;
        		}
        		else if(l1.val+l2.val+1>=10){
        			carry=true;
					//l1.val=l1.val+l2.val-10+1;
					l2.next=new ListNode(0);
					return addTwoNumbers(l1,l2);
					
				}
        		
        	}
        }
        
		else if (l1!=null &&l2!=null){//have issue here
        	
        	if(carry==false){
        		if (l1.val+l2.val<10 ){
        			carry=false;
        			l1.val=l1.val+l2.val;
        			
        			
        			//ListNode temp=l1.next;
        			l1.next= addTwoNumbers(l1.next,l2.next);
        			
        			return l1;
        		}
        		if(l1.val+l2.val>=10){//need to fix
        			carry=true;
					l1.val=l1.val+l2.val-10;
					//l1.next=new ListNode(1);
					l1.next= addTwoNumbers(l1.next,l2.next);
					return l1;
					
				}
        	}
        	else{
        		if (l1.val+l2.val+1<10 ){
        			carry=false;
        			l1.val=l1.val+l2.val+1;
        			l1.next= addTwoNumbers(l1.next,l2.next);
        			return l1;
        		}
        		if(l1.val+l2.val+1>=10){//need to fix
        			carry=true;
					l1.val=l1.val+l2.val-10+1;
					//l1.next=new ListNode(1);
					l1.next= addTwoNumbers(l1.next,l2.next);
					return l1;
					
				}
        		
        	}
        }
        return l1;
    }

	
	
	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
		ListNode l1=new ListNode(2);
		l1.next=new ListNode(8);
		//l1.next.next=new ListNode(1);
		//l1.next.next.next=new ListNode(2);
		//l1.next.next.next.next=new ListNode(2);
		ListNode l2=new ListNode(4);
		l2.next=new ListNode(2);
		l2.next.next=new ListNode(2);
		ListNode result=addTwoNumbers(l1,l2);
		//ListNode rev=reverse(l1);
		while(result!=null){
			System.out.println("result:"+result.val);
			result=result.next;
			}
	}

}
