//173
//O(h) memory
//only add left side to LinkedList(queue)

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    
    LinkedList<TreeNode> que;
    public BSTIterator(TreeNode root) {
        que=new LinkedList<TreeNode>();
        TreeNode curr= root;
        while (curr!=null){
            que.addFirst(curr);
            curr=curr.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if (que.size()!=0)
            return true;
        return false;
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode del=que.removeFirst();
        if (del.right!=null){
            TreeNode temp=del.right;
            while (temp!=null){
                que.addFirst(temp);
                temp=temp.left;
            }   
        }
        return del.val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
