//This is LRUCache
/*
 * Design and implement a data structure for Least Recently Used (LRU) cache.
 *  It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key 
if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not 
already present. When the cache reached its capacity, 
it should invalidate the least recently used item 
before inserting a new item.

 * */
import java.util.HashMap;
class LRUCache {
    private HashMap<Integer,dblinkednode> map;
    private dblinkedlst cache;
    private int capacity=0;

    public LRUCache(int capacity) {
        this.capacity=capacity;
        map=new HashMap<Integer,dblinkednode>();
        cache=new dblinkedlst();
    }
    
    public int get(int key) {
        if (map.get(key)==null)
            return -1;
        dblinkednode temp=map.get(key);
        cache.removenode(temp);
        cache.addnode(temp);
        return temp.val;
    }
    
    public void put(int key, int value) {
        if (cache.get_size()<capacity){
            if (map.get(key)==null){
                dblinkednode new_node=new dblinkednode(key,value);
                cache.addnode(new_node);
                map.put(key,new_node);
            }
            else{
                dblinkednode temp=map.get(key);
                cache.removenode(temp);
                dblinkednode new_temp=new dblinkednode(key,value);
                cache.addnode(new_temp);
                map.put(key,new_temp);
                
                
            }
        }
        else{
            if (map.get(key)==null){
                dblinkednode new_node=new dblinkednode(key,value);
                dblinkednode del=cache.removetail();
                cache.addnode(new_node);
                map.remove(del.key);
                map.put(key,new_node);
            }
            else{
                dblinkednode temp=map.get(key);
                cache.removenode(temp);
                dblinkednode new_temp=new dblinkednode(key,value);
                cache.addnode(new_temp);
                map.put(key,new_temp);
            }
            
        }
    
    }
    public static void main(String[] args) {
		// TODO Auto-generated method stub
		
    		LRUCache exam=new LRUCache(2);
		exam.put(3, 3);
		exam.put(2, 2);
		//exam.get( 3);
		exam.put(4, 4);
		exam.put(5, 5);
		System.out.println(exam.cache.head.val);
		System.out.println(exam.cache.head.next.val);
		
		//System.out.println(exam.cache.removetail().val);
    	
    	
//    	dblinkedlst tryout=new dblinkedlst();
//    	dblinkednode	temp1=new dblinkednode(1,1);
//    	tryout.addnode(temp1);
//    	System.out.println(tryout.head.val);
//    	System.out.println(tryout.tail.val);
//    	tryout.addnode(new dblinkednode(2,2));
//    	System.out.println(tryout.head.val);
//    	System.out.println(tryout.tail.val);
//    	dblinkednode temp=new dblinkednode(3,3);
//    	tryout.addnode(temp);
//    	System.out.println(tryout.head.val);
//    	System.out.println(tryout.tail.val);
//    	tryout.removetail();
//    //	System.out.println(tryout.tail.next.val);
//    	//System.out.println(tryout.tail.next.next.val);
	}
}


class dblinkednode{
    int key;
    int val;
    dblinkednode prev;
    dblinkednode next;
    dblinkednode(int k,int v){
        key=k;
        val=v;
    }
}
class dblinkedlst{
    dblinkednode head=null;
    dblinkednode tail=null;
    int size=0;
    public int get_size(){
        return size;
    }
    public void addnode(dblinkednode node){
        size++;
        if (head==null){
        		node.prev=null;
            node.next=null;
            head=node;
            tail=node;
            
            
        
        }
        else {
        head.prev=node;
        node.next=head;
        node.prev=null;
        head=node;
        }
    
    }
    
    public void removenode(dblinkednode node){
    		//System.out.println("tail in general: "+tail.val);
    		//System.out.println("node.next: "+node.next.val);
    		
        if (node==null)
            return;
        size--;
        if (node.next==null && node.prev==null){
            head=null;
            tail=null;
        }
        else if (node.next!=null &&node.prev==null){
            head=node.next;
            head.prev=null;
            //System.out.println("tail3:"+tail.val);
        }
        else if (node.next==null && node.prev!= null){
        		tail=node.prev;
            node.prev.next=null;
            
            System.out.println("tail:"+tail.val);
            
        }
        else{
            dblinkednode temp_prev=node.prev;
            dblinkednode temp_next=node.next;
            node.next.prev=temp_prev;
            node.prev.next=temp_next;
            //System.out.println("tail4:"+tail.val);
        }
    }
    public dblinkednode removetail(){
        dblinkednode temp=tail;
        //System.out.println("tail2"+tail.val);
        
        removenode(this.tail);
       
        
        return temp;
    }
    
   
}
