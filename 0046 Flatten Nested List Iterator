//341
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    ArrayList<Integer> stac;
    public NestedIterator(List<NestedInteger> nestedList) {
        stac=new  ArrayList<Integer> ();
        
        for (NestedInteger k:nestedList){
            dfs(k,stac);
        }
    }
    
    public void dfs(NestedInteger nest,ArrayList<Integer> res){
        if (nest.isInteger())
            res.add(nest.getInteger());
        else{
            List<NestedInteger>temp=nest.getList();
            for (NestedInteger i: temp){
                dfs(i,res);
            }
        }
    }

    @Override
    public Integer next() {
        Integer x=stac.get(0);
        stac.remove(0);
        return x;
    }

    @Override
    public boolean hasNext() {
        if (stac.size()!=0)
            return true;
        return false;
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
